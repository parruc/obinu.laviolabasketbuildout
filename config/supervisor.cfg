[supervisor]
parts =
    supervisor
#    supervisor.init
#    supervisor.fixperms
recipe = collective.recipe.supervisor
# port = ${hosts:supervisor}:${ports:supervisor}
http-socket = unix
file = ${buildout:directory}/var/supervisord.sock
user = admin
password = super
# serverurl = http://${hosts:supervisor}:${ports:supervisor}
programs =
eventlisteners =
plugins = superlance

[supervisor.fixperms]
recipe = plone.recipe.command
command =
   chmod +x ${supervisor.init:output}
update-command = ${supervisor.fixperms:command}

[supervisor.init]
recipe = collective.recipe.template
output = ${buildout:directory}/etc/supervisor.init
input = inline:
  #!/bin/sh
  ### BEGIN INIT INFO 
  # Provides:          supervisor instance
  # Default-Start:     2 3 4 5 
  # Default-Stop:      0 1 6 
  # Short-Description: Debian startup script for a supervisor instance
  # Description:       This file should be used to construct scripts to be 
  #                    placed in /etc/init.d. 
  ### END INIT INFO
  supervisorctl="${buildout:directory}/bin/supervisorctl"
  supervisord="${buildout:directory}/bin/supervisord"
  name="${settings:projectname}"
  [ -f $supervisord ] || exit 1
  [ -f $supervisorctl ] || exit 1
  RETVAL=0
  start() {
     echo -n "Starting $name: "
     $supervisord
     RETVAL=$?
     [ $RETVAL -eq 0 ] && touch /var/run/$name
     echo
     return $RETVAL
  }
  stop() {
     echo -n "Stopping $name: "
     $supervisorctl shutdown
     RETVAL=$?
     [ $RETVAL -eq 0 ] && rm -f /var/run/$name
     echo
     return $RETVAL
  }
  status() {
    $supervisorctl status
    RETVAL=$?
    return $RETVAL
  }
  case "$1" in
         start)
             start
             ;;
         stop)
             stop
             ;;
         status)
             status
             ;;
         *)
             echo "$0 [start|stop|status]"
             ;;
  esac
  exit $REVAL

